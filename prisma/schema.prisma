// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum JOURNAL_ENTRY_STATUS {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Account {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  // stripeCustomerId String @unique

  @@unique([userId])
}

model User {
  id   String  @id @default(uuid())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clerkId   String   @unique
  email     String   @unique

  account      Account?
  journelEntry JournelEntry[]
  Analyses     Analysis[]
}

model JournelEntry {
  id        String               @id @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  content   String               @db.Text
  status    JOURNAL_ENTRY_STATUS @default(DRAFT)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  analysis Analysis?

  @@unique([id, userId])
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId String       @unique
  entry   JournelEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  mood           String
  summary        String  @db.Text
  color          String
  negative       Boolean
  subject        String  @db.Text
  sentimentScore Float

  @@index([userId])
}
